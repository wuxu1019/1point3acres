1: diff between call by value and call by reference
When passing data by value, the data is copied to a local variable/object in the function. Changes to this data are not reflected in the data of the calling function. For larger objects, passing data by value can be very expensive.
When passing data by reference, a pointer to the data is copied instead. Changes to the data pointed to by the pointer are reflected in the data of the calling function. Regardless of the size of the object, passing data by reference always has the same cost.

2. static
Static Data Members: static data members are class members and shared among all objects.
Static Member Methods: static methods declared as static are class members
1> can only called other static methods
2> they can only access static data
3> they can not access this or supper
static local variable:
Static variables: means that they will die with the program itself,
this means that the memory will be allocated & never will be released implicitly.
Global: these variables can be accessed from anywhere.
Local: these variables can be accessed inside their scopes only.


Static variables are not accessible by other files using extern keywords.


3. distinct between memcopy and memmove
memcpy() and memmove()

void memcopy(void *dest, void *src, size_t n){
    char *csrc = (char *)src;
    char *cdest = (char *)dest;

    for(i = 0; i < n; i++){
        cdest[i] = csrc[i]
    }

}

void myMemMove(void *dest, void *src, size_t n){
   // Typecast src and dest addresses to (char *)
   char *csrc = (char *)src;
   char *cdest = (char *)dest;

   // Create a temporary array to hold data of src
   char *temp = new char[n];

   // Copy data from csrc[] to temp[]
   for (int i=0; i<n; i++)
       temp[i] = csrc[i];

   // Copy data from temp[] to cdest[]
   for (int i=0; i<n; i++)
       cdest[i] = temp[i];

   delete [] temp;
}

4. diff between heap and stack
Function parameters and local variables are generally allocated on a stack.
A heap is generally used for larger data structures or memory that the programmer wants to explicitly manage.
Whenever “new” or “malloc” is used in C++ or C respectively, the memory for that request is allocated on a heap,
and then it’s up to the coder to make sure that is gets freed at the appropriate time with “delete” or “free”.

Global variables have static storage duration.
They are stored in an area that is separate from both "heap" and "stack".
Global constant objects are usually stored in "code" segment,
while non-constant global objects are stored in the "data" segment.

5.Memory Layout of C Programs
A typical memory representation of C program consists of following sections.
1. Text segment
2. Initialized data segment
3. Uninitialized data segment
4. Stack
5. Heap
https://www.geeksforgeeks.org/memory-layout-of-c-program/


6. TLB
translate lookaside buffer
A translation lookaside buffer (TLB) is a memory cache
that stores recent translations of virtual memory to physical addresses for faster retrieval.

7. Virtual memory
Virtual memory is a memory management capability of an OS
that uses hardware and software to allow a computer
to compensate for physical memory shortages by
temporarily transferring data from random access memory (RAM) to disk storage.

8. how system call words
First, the user application program sets up the arguments for the system call.
After the arguments are all set up, the program executes the "system call" instruction.
This instruction causes an exception: an event that causes the processor to jump to a new address and start executing the code there.

The instructions at the new address save your user program's state,
figure out what system call you want,
call the function in the kernel that implements that system call, restores your user program state,
and returns control back to the user program.

various system call like open , read, write, socket etc

9. What is difference between User space and Kernel space?
Memory get's divided into two distinct areas:

The user space, which is a set of locations where normal user processes run (i.e everything other than the kernel). The role of the kernel is to manage applications running in this space from messing with each other, and the machine.
The kernel space, which is the location where the code of the kernel is stored, and executes under.
Processes running under the user space have access only to a limited part of memory, whereas the kernel has access to all of the memory. Processes running in user space also don't have access to the kernel space. User space processes can only access a small part of the kernel via an interface exposed by the kernel - the system calls. If a process performs a system call, a software interrupt is sent to the kernel, which then dispatches the appropriate interrupt handler and continues its work after the handler has finished.

10. diff mutex. semophore, spinlock

Mutex provides one person to access a single resource at a time, others must wait in a queue. Once this person is done, the guy next in the queue acquire the resource.
So access is serial, one guy after other. Too aggressive.

Semaphore are useful if multiple instances (N) of a resource is to be shared among a set of users. As soon as all N resources are acquired, any new requester has to wait. Since there is no single lock to hold, there is as such no ownership of a semaphore.

Spinlock is an aggressive mutex. In mutex, if you find that resource is locked by someone else, you (the thread/process) switch the context and start to wait (non-blocking).
Whereas spinlocks do not switch context and keep spinning. As soon as resource is free, they go and grab it. In this process of spinning, they consume many CPU cycles. Also, on a uni-processor machine they are useless and perform very badly (do I need to explain that?).

11. diff between interrupt and polling

12. diff between call by value and call by reference

13. how bootloader work

14. what is type case

15. what is enum

16. what is callback function

17. property of OOP

18. diff between heap and stack, why use heap

19. what is virtual function and how to implement

20. What is memory fragmentation? How to resolve it?

21. Reference VS Pointer

22. volatile

23. big endian, little endian

24. cuda
CUDA is a parallel computing platform and programming model that makes using a GPU
for general purpose computing simple and elegant.